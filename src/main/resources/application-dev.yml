spring:
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/order_platform}
    username: ${DB_USERNAME:bonun}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:password}
      database: 0
    mongodb:
      host: ${MONGODB:localhost}
      port: 27017
      database: ${MONGO_NAME:store-db}
      username: ${MONGO_INITDB_ROOT_USERNAME:root}
      password: ${MONGO_INITDB_ROOT_PASSWORD:profectcloud}
      authentication-database: admin
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${OAUTH_JWKS_URI:http://localhost:8083/oauth/jwks}
  kafka:
    bootstrap-servers: localhost:9092
    admin:
      fail-fast: false
      properties:
        request.timeout.ms: 30000
        default.api.timeout.ms: 30000
        retry.backoff.ms: 500
    producer:
      acks: all
      retries: 10
      batch-size: 65536          # 64KB 배치
      linger-ms: 5               # 5ms 대기하여 배치
      compression-type: lz4      # 또는 zstd
      properties:
        enable.idempotence: true # 멱등 프로듀서

    consumer:
      group-id: order-service
      auto-offset-reset: earliest
      max-poll-records: 500
      fetch-min-size: 1048576     # 1MB
      fetch-max-wait: 500         # 최대 500ms 대기
      properties:
        max.partition.fetch.bytes: 1048576   # 파티션당 1MB
        session.timeout.ms: 15000

    listener:
      ack-mode: record
      concurrency: 12             # 파티션 수에 맞춰 조정 (예: 12 파티션이면 12)
jwt:
  audience:  ${AUTH_INTERNAL_AUDIENCE:internal-services}

discord:
  webhook:
    url: ${DISCORD_URL:https://discord.com/api/webhooks/1406866286629355540/Y4r06Y2UIA5IjkrG_JqWC1P_u0xC9GuTmdR0N-ji6eQiuNDsyu_wToA0RcEAjhlWpSEU}

service:
  store:
    url: ${STORE_SVC_URI:http://localhost:8082}

redis:
  refund:
    queue: ${REDIS_REFUND_QUEUE}

topics:
  order:
    create_requested: order.valid.request
    validated: order.valid.result
    canceled: order.canceled
    accept: order.accept
    completed: order.completed
    dev:
      completed: dev.order.completed
  payment:
    result: payment.result
  stock:
    request: stock.request
    result: stock.result
