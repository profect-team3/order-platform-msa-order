spring:
  application:
    name: order
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/order_platform}
    username: ${DB_USERNAME:bonun}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        use_sql_comments: true
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:password}
      database: 0
    mongodb:
      host: ${MONGODB:mongodb}
      port: 27017
      database: ${MONGO_NAME:store-db}
      username: ${MONGO_INITDB_ROOT_USERNAME:root}
      password: ${MONGO_INITDB_ROOT_PASSWORD:profectcloud}
      authentication-database: admin
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${OAUTH_JWKS_URI:http://localhost:8083/oauth/jwks}

jwt:
  audience:  ${AUTH_INTERNAL_AUDIENCE:internal-services}

kafka:
  bootstrap-servers: localhost:9092
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    properties:
      spring.json.add.type.headers: true
  consumer:
    group-id: discord-notifier-group
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    properties:
      spring.json.trusted.packages: "*"
      spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
  

logging:
  level:
    org:
      springframework:
        data:
          mongodb:
            core:
              MongoTemplate: DEBUG

discord:
  webhook:
    url: ${DISCORD_URL:https://discord.com/api/webhooks/1406866286629355540/Y4r06Y2UIA5IjkrG_JqWC1P_u0xC9GuTmdR0N-ji6eQiuNDsyu_wToA0RcEAjhlWpSEU}

resilience4j:
  circuitbreaker:
    configs:
      default:
        waitDurationInOpenState: 30s
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 5s
        registerHealthIndicator: true
        recordFailurePredicate: app.global.config.RestTemplateCircuitRecordFailurePredicate

    instances:
      default:
        baseConfig: default

  timelimiter:
    configs:
      default:
        timeoutDuration: 6s
        cancelRunningFuture: true

service:
  store:
    url: ${STORE_SVC_URI:http://localhost:8082}

server:
  port: 8084